package <%= @namespace %>.provider.test;

import java.util.Date;

import android.content.ContentResolver;
import android.database.Cursor;
import android.net.Uri;
import android.test.ProviderTestCase2;

import <%= @namespace %>.model.<%= @type.class_name %>;
import <%= @namespace %>.provider.<%= @type.class_name %>Provider;

public abstract class <%= @type.class_name %>ProviderTestBase extends ProviderTestCase2<<%= @type.class_name %>Provider> {

  public <%= @type.class_name %>ProviderTestBase() {
    super( <%= @type.class_name %>Provider.class, <%= @type.class_name %>Provider.AUTHORITY );
  }
  
  protected abstract void modify<%= @type.class_name %>( <%= @type.class_name %> <%= @type.name.downcase %> );
  protected abstract boolean ensureModify( <%= @type.class_name %> <%= @type.name.downcase %> );
  
  private <%= @type.class_name %> create<%= @type.class_name %>() {
    <%= @type.class_name %> <%= @type.name.downcase %> = new <%= @type.class_name %>();
    return <%= @type.name.downcase %>;
  }
  
  public void testEquals() {
    <%= @type.class_name %> expected = create<%= @type.class_name %>();
    <%= @type.class_name %> actual = expected;
    
    assertTrue( actual.equals( expected ) );
  }

  public void testInsertNew() {
    // create a new object
    <%= @type.class_name %> expected = create<%= @type.class_name %>();

    // save it
    Uri new<%= @type.class_name %>Uri = getProvider().insert( expected );
    assertNotNull( new<%= @type.class_name %>Uri );

    // get it from the database
    Cursor c = getProvider().query( new<%= @type.class_name %>Uri );
    assertEquals( 1, c.getCount() );
    assertTrue( c.moveToFirst() );

    <%= @type.class_name %> actual = <%= @type.class_name %>Provider.getFromCursor( c );

    assertNotNull( actual );
    assertNotNull( actual.getID() );
    assertNotNull( actual.getCreated() );
    assertNotNull( actual.getModified() );
    
    assertEquals( expected, actual );
  }

  public void testQuery()
  {    
    // put a new <%= @type.name.downcase %> in the database
    <%= @type.class_name %> expected = create<%= @type.class_name %>();
    Uri new<%= @type.class_name %>Uri = getProvider().insert( expected );

    // get it back
    Cursor c = getProvider().query( new<%= @type.class_name %>Uri );
    assertEquals( 1, c.getCount() );
    assertTrue( c.moveToFirst() );
    <%= @type.class_name %> actual = <%= @type.class_name %>Provider.getFromCursor( c );

    assertEquals( expected, actual );
  }

  public void testUpdate() {
    <%= @type.class_name %> <%= @type.name.downcase %> = create<%= @type.class_name %>();

    Uri <%= @type.name.downcase %>Uri = getProvider().insert( <%= @type.name.downcase %> );

    // make a change
    modify<%= @type.class_name %>( <%= @type.name.downcase %> );

    int count = getProvider().update( <%= @type.name.downcase %> );
    assertEquals( 1, count );

    Cursor c = getProvider().query( <%= @type.name.downcase %>Uri );
    assertEquals( 1, c.getCount() );
    assertTrue( c.moveToFirst() );

    <%= @type.class_name %> fromDb = <%= @type.class_name %>Provider.getFromCursor( c );

    // did our changes stick?
    assertTrue( ensureModify( <%= @type.name.downcase %> ) );

    assertNotNull( fromDb.getModified() );
  }
}
