package <%= @namespace %>.provider.test;

import java.util.Date;

import android.content.ContentResolver;
import android.database.Cursor;
import android.net.Uri;
import android.test.ProviderTestCase2;
import android.test.mock.MockContentResolver;

import <%= @namespace %>.model.<%= @type.class_name %>;
import <%= @namespace %>.provider.<%= @type.class_name %>Provider;

public class <%= @type.class_name %>ProviderTest extends ProviderTestCase2<<%= @type.class_name %>Provider> {

  public <%= @type.class_name %>ProviderTest() {
    super( <%= @type.class_name %>Provider.class, <%= @type.class_name %>Provider.AUTHORITY );
  }

  private <%= @type.class_name %>Provider <%= @type.name.downcase %>;

  @Override
  protected void setUp() throws Exception {
    super.setUp();

    <%= @type.name.downcase %> = new <%= @type.class_name %>Provider();
  }

  @Override
  public MockContentResolver getMockContentResolver() {
    return super.getMockContentResolver();
  }

  private <%= @type.class_name %> create<%= @type.class_name %>() {
    <%= @type.class_name %> <%= @type.name.downcase %> = new <%= @type.class_name %>();
    return <%= @type.name.downcase %>;
  }

  public void testPreconditions() {
    assertNotNull( <%= @type.name.downcase %> );
  }

  public void testInsertNew() {
     ContentResolver db = getMockContentResolver();
    <%= @type.class_name %> <%= @type.name.downcase %> = create<%= @type.class_name %>();
    Uri new<%= @type.class_name %>Uri = db.insert( <%= @type.class_name %>Provider.CONTENT_URI, <%= @type.class_name %>Provider.getValues( <%= @type.name.downcase %> ) );

    assertNotNull( new<%= @type.class_name %>Uri );

    // get it from the database
    Cursor c = db.query( new<%= @type.class_name %>Uri, null, null, null, null );
    assertEquals( 1, c.getCount() );
    assertTrue( c.moveToFirst() );

    <%= @type.name.downcase %> = <%= @type.class_name %>Provider.getFromCursor( c );

    assertNotNull( <%= @type.name.downcase %> );
    assertNotNull( <%= @type.name.downcase %>.getID() );
    assertNotNull( <%= @type.name.downcase %>.getCreated() );
    assertNotNull( <%= @type.name.downcase %>.getModified() );
  }

  public void testQuery()
  {
    ContentResolver db = getMockContentResolver();
    <%= @type.class_name %> <%= @type.name.downcase %> = create<%= @type.class_name %>();

    Uri <%= @type.name.downcase %>Uri = db.insert( <%= @type.class_name %>Provider.CONTENT_URI, <%= @type.class_name %>Provider.getValues( <%= @type.name.downcase %> ) );

    Cursor c = db.query( <%= @type.name.downcase %>Uri, null, null, null, null );
    assertEquals( 1, c.getCount() );
    assertTrue( c.moveToFirst() );

    <%= @type.class_name %> fromDb = <%= @type.class_name %>Provider.getFromCursor( c );

    assertEquals( <%= @type.name.downcase %>Uri.getPathSegments().get(1), fromDb.getID().toString() );
  }

  public void testUpdate() {
    String expectedTitle = "updated title";

    ContentResolver db = getMockContentResolver();
    <%= @type.class_name %> <%= @type.name.downcase %> = create<%= @type.class_name %>();

    Uri editionUri = db.insert( <%= @type.class_name %>Provider.CONTENT_URI, <%= @type.class_name %>Provider.getValues( <%= @type.name.downcase %> ) );
    <%= @type.name.downcase %>.setID( Integer.parseInt( editionUri.getPathSegments().get( 1 ) ) );

    //  TODO: change some value
    // <%= @type.name.downcase %>.setTitle( expectedTitle );

    int count = db.update( editionUri, <%= @type.class_name %>Provider.getValues( <%= @type.name.downcase %> ), null, null );

    assertEquals( 1, count );

    Cursor c = db.query( editionUri, null, null, null, null );
    assertEquals( 1, c.getCount() );
    assertTrue( c.moveToFirst() );

    <%= @type.class_name %> fromDb = <%= @type.class_name %>Provider.getFromCursor( c );

    // TODO make sure it's changed.
    //assertEquals( expectedTitle, fromDb.Title );

    assertNotNull( fromDb.getModified() );
  }
}
